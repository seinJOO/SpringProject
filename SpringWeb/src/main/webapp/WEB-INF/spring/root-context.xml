<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	
	<!-- hikariCP를 사용하지 않을 때 dataSource 설정 방법 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521/XEPDB1" />
		<property name="username" value="spring" />
		<property name="password" value="spring" />
	</bean> -->
	
	
	<!-- hikariCP 빈으로 등록하기 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521/XEPDB1" />
		<property name="username" value="spring" />
		<property name="password" value="spring" />
	</bean>
	
	<!-- DataSource 설정 -->
	<bean id="ds" class="com.zaxxer.hikari.HikariDataSource">
		<constructor-arg ref="hikariConfig"></constructor-arg>
	</bean>
	
	<!-- JDBC 템플릿 설정 - JDBC 템플릿 사용을 위한 bean 추가-->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	<property name="dataSource" ref="ds"></property> <!-- jdbcTemplate으로 객체를 생성할 때 인자값으로 id="ds"인 bean의 인자값을 넘겨준다 -->
	</bean>
	
	<!--  MyBatis 사용의 핵심 객체 SQLsessionFactory 추가  -->
 	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ds"/>
	</bean>
	<!-- 		위의 mapperLocation은 테스트매퍼와 경로가 충돌됨 -> JUnit테스트를 실행할 때는 주석처리 해준다!
			  *** 아래 매퍼패키지 스캔 태그와 같은 의미임 -->
		<!-- <property name="mapperLocations" value="classpath:com/zerock/board/mapper/*.xml"></property>  => 이렇게 객체 자체에 등록해줄 수 있음
				== <mybatis-spring:scan base-package="com.zerock.board.mapper"/>	<<< 같은 의미임
					단, 동일한 패키지의 매퍼 스캔을 중복시키면 오류가 발생하니까 꼭 주의하기 ^^***-->
	

<!-- 	MyBatis의 테스트 매퍼 스캔 - 테스트 완료 시 주석처리 -->
	 <mybatis-spring:scan base-package="com.zerock.testmapper"/> 
	
<!-- 	MyBatis의 생성한 매퍼 패키지를 스캔하는 태그 -->
	<mybatis-spring:scan base-package="com.zerock.board.mapper"/>
	<mybatis-spring:scan base-package="com.zerock.member.mapper"/>

	
</beans>
